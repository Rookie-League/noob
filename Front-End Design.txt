1、尽可能做到彻底与后端分离（主要是资源文件加载的分离，不包括物理分离，这意味着不能直接重用原始代码）
2、使用公共的HTML片段进行组件的渲染（CSS同理，并且一次加载以后尽可能做缓存避免重新加载）
3、除基本的几个页面以外均不进行页面跳转与刷新操作
4、在各个模块间的跳转使用HASH（全面升级浏览器兼容版本以后可以考虑HTML5）
5、JS进行模块化管理，根据HASH执行动态加载，并注册到全局进行缓存（参考4进行版本兼容）
6、字典及通用型系统参数注册到全局，初始化页面时如果没有需求则为空，根据需要动态加载并缓存
7、对前端框架进行封装（如JQuery），打造项目组框架（或者说门面？），避免由于后续切换技术栈导致系统出现大幅度的修改
8、前端组件统一管理，理论上不应该有专用型组件出现，如果存在，应该考虑泛化或寻找已有组件替换（可能需要调整操作或业务）



项目组框架的易用程度决定了移植的速度，而完善程度决定了移植的质量。理论上来说，框架应该包括页面渲染、数据加载、数据解析、数据校验和国际化，但不仅限于这些内容（如帮助系统？）。